# Foglio di Riferimento per le Espressioni Regolari

## 1. Corrispondenza di Caratteri di Base
Le espressioni regolari funzionano principalmente confrontando caratteri all'interno di una stringa. Questa sezione copre i modelli fondamentali utilizzati per trovare sequenze esatte, caratteri alternativi o qualsiasi carattere.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `abc`        | Corrisponde esattamente alla stringa "abc". |
| `a|b`        | Corrisponde a "a" oppure "b". |
| `.`          | Corrisponde a qualsiasi carattere singolo tranne un ritorno a capo. |
| `\d`         | Corrisponde a qualsiasi cifra (0-9). |
| `\w`         | Corrisponde a qualsiasi carattere di parola (lettera, cifra, trattino basso). |
| `\s`         | Corrisponde a qualsiasi carattere di spazio (spazio, tabulazione, ritorno a capo). |
| `\D`         | Corrisponde a qualsiasi carattere che non sia una cifra. |
| `\W`         | Corrisponde a qualsiasi carattere non di parola. |
| `\S`         | Corrisponde a qualsiasi carattere non di spazio. |

---

## 2. Set di Caratteri e Intervalli
I set di caratteri e gli intervalli consentono di specificare più caratteri possibili in una determinata posizione all'interno di una stringa. Utilizzare le parentesi quadre `[ ]` per definire un set di caratteri da confrontare.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `[aeiou]`    | Corrisponde a una qualsiasi vocale. |
| `[^aeiou]`   | Corrisponde a qualsiasi carattere che NON sia una vocale. |
| `[a-z]`      | Corrisponde a qualsiasi lettera minuscola da "a" a "z". |
| `[A-Z]`      | Corrisponde a qualsiasi lettera maiuscola da "A" a "Z". |
| `[0-9]`      | Corrisponde a qualsiasi cifra da "0" a "9". |
| `[a-zA-Z0-9]`| Corrisponde a qualsiasi lettera o cifra. |
| `[13579]`    | Corrisponde a qualsiasi cifra dispari. |
| `[a-dm-q]`   | Corrisponde a qualsiasi lettera tra "a" e "d" OPPURE tra "m" e "q". |

---

## 3. Ancore (Corrispondenza Basata sulla Posizione)
### Spiegazione della grammatica:
- Le ancore non corrispondono a caratteri, ma piuttosto a posizioni nel testo.
- Il simbolo `^` assicura che la corrispondenza avvenga **all'inizio di una stringa**.
- Il simbolo `$` assicura che la corrispondenza avvenga **alla fine di una stringa**.
- I simboli `\b` e `\B` definiscono **confini di parola**, consentendo di trovare parole intere.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `^Hello`     | Corrisponde a "Hello" solo se si trova all'inizio della stringa. |
| `world$`     | Corrisponde a "world" solo se si trova alla fine della stringa. |
| `\bword\b`  | Corrisponde alla parola esatta "word" con confini di parola. |
| `\Bword\B`  | Corrisponde a "word" solo se **non** è ai confini di parola. |

---

## 4. Ripetizioni e Quantificatori
### Spiegazione della grammatica:
- I **quantificatori** determinano **quante volte** un carattere o un gruppo deve apparire in una corrispondenza.
- `*` significa **zero o più** ripetizioni.
- `+` significa **una o più** ripetizioni.
- `?` significa **zero o una** occorrenza.
- `{n}` specifica un **numero esatto** di occorrenze.
- `{n,}` indica **almeno** `n` occorrenze.
- `{n,m}` indica un numero di occorrenze **tra** `n` e `m`.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `a*`         | Corrisponde a "a" ripetuto zero o più volte. |
| `a+`         | Corrisponde a "a" ripetuto una o più volte. |
| `a?`         | Corrisponde a "a" zero o una volta. |
| `a{3}`       | Corrisponde esattamente a tre "a". |
| `a{2,4}`     | Corrisponde tra 2 e 4 "a". |
| `a{2,}`      | Corrisponde ad almeno 2 "a". |

---

## 5. Raggruppamento e Cattura
### Spiegazione della grammatica:
- Le parentesi tonde `( )` **raggruppano caratteri** per applicare quantificatori o catturare testo corrispondente.
- `(?:abc)` è un **gruppo non catturante**, quindi raggruppa senza memorizzare.
- `\1`, `\2`, ecc. si riferiscono a **gruppi precedentemente catturati**.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `(abc)`      | Cattura "abc" come un gruppo. |
| `(abc|def)`  | Corrisponde a "abc" o "def". |
| `(?:abc)`    | Corrisponde a "abc" ma **non lo cattura**. |

---

## 6. Lookahead e Lookbehind
### Spiegazione della grammatica:
- I **lookahead** e **lookbehind** **verificano la presenza o l’assenza di un modello prima o dopo una corrispondenza**, senza includerlo nel risultato.

| Comando Regex  | Spiegazione |
|--------------|-------------|
| `\d+(?= euros)` | Corrisponde a cifre seguite da "euros". |
| `\d+(?! euros)` | Corrisponde a cifre **non seguite** da "euros". |
| `(?<=\$)\d+`    | Corrisponde a cifre precedute dal simbolo del dollaro. |
| `(?<!\$)\d+`    | Corrisponde a cifre **non precedute** dal simbolo del dollaro. |

---

## 7. Escape dei Caratteri Speciali
### Spiegazione della grammatica:
- Alcuni caratteri (`.`, `*`, `+`, `?`, `|`, `()`, `{}`, `[]`) hanno **significati speciali** nelle regex.
- Per cercarli **letteralmente**, è necessario anteporre un **backslash (`\`)**.

| Comando Regex | Spiegazione |
|--------------|-------------|
| `\.`        | Corrisponde a un punto "." letterale. |
| `\*`        | Corrisponde a un asterisco "*" letterale. |
| `\?`        | Corrisponde a un punto interrogativo "?" letterale. |
| `\+`        | Corrisponde a un segno più "+" letterale. |
| `\|`        | Corrisponde a un **pipe** "|" letterale. |
| `\(`, `\)`  | Corrisponde a parentesi tonde "(" e ")" letterali. |

